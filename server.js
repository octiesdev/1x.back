require('dotenv').config();
const axios = require("axios");
const express = require("express");
const mongoose = require("mongoose");
const TelegramBot = require("node-telegram-bot-api");
const path = require("path");
const cors = require("cors");
const TonWeb = require("tonweb");

const DATABASE = process.env.DATABASE;
const User = require("./models/User");
const Farming = require("./models/Farming"); // ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ö–µ–º—É Farming

const TON_API_KEY = process.env.TON_API_KEY;
const WALLET_ADDRESS = "0QBkLTS-N_Cpr4qbHMRXIdVYhWMs3dQVpGSQEl44VS3SNwNs";
const API_URL = `https://testnet.tonapi.io/v2/blockchain/accounts/${WALLET_ADDRESS}/transactions`;

const fetch = require("node-fetch"); // –µ—Å–ª–∏ fetch –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–∏: npm install node-fetch

const ADMIN_API_URL = "https://adminviber1x-production.up.railway.app"; // –ê–¥—Ä–µ—Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏

async function getNodeById(nodeId) {
    try {
        const response = await fetch(`${ADMIN_API_URL}/onex-nodes/${nodeId}`);
        if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–¥—ã: ${response.status}`);
        return await response.json();
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–æ–¥—ã —Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:", error);
        return null;
    }
}

const hexToUtf8 = (hex) => {
    return Buffer.from(hex.replace(/^0x/, ''), 'hex').toString('utf8');
};

const fetchTransactions = async () => {
    try {
        const response = await axios.get(API_URL, {
            headers: { Authorization: `Bearer ${TON_API_KEY}` },
            params: { limit: 5, decode: 1 }
        });

        const transactions = response.data.transactions;
        console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", transactions);

        for (const tx of transactions) {
            let sender = tx.in_msg?.source?.address || "unknown";
            let nanoTON = tx.in_msg?.value || 0;
            let comment = null;
            let txHash = tx.hash;

            console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:", txHash);
            console.log("üí∞ –°—É–º–º–∞ (nanoTON):", nanoTON);

            if (tx.in_msg?.decoded_body?.value?.text) {
                comment = tx.in_msg.decoded_body.value.text;
                console.log(`üí¨ –ù–∞–π–¥–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (decoded_body): ${comment}`);
            } else if (tx.in_msg?.payload?.value?.text) {
                comment = tx.in_msg.payload.value.text;
                console.log(`üí¨ –ù–∞–π–¥–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (payload): ${comment}`);
            } else if (tx.in_msg?.decoded_op_name === "text_comment" && tx.in_msg?.raw_body) {
                console.log("üü° raw_body (Base64):", tx.in_msg.raw_body);
                comment = hexToUtf8(tx.in_msg.raw_body.slice(16));
                console.log(`üí¨ –ù–∞–π–¥–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (raw_body ‚Üí text_comment): ${comment}`);
            }

            if (comment) {
                await processTransaction({ sender, nanoTON, comment, txHash });
            } else {
                console.log("‚ö† –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.");
            }
        }
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:", error.response?.data || error.message);
    }
};

const processTransaction = async ({ sender, nanoTON, comment, txHash }) => {
    try {
        const amountTON = parseFloat(nanoTON) / 1e9;
        console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç ${sender} –Ω–∞ —Å—É–º–º—É ${amountTON} TON —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º: ${comment}`);

        const match = comment.match(/deposit:(\d+)/);
        const userId = match ? match[1] : null;

        if (!userId) {
            console.log("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å userId.");
            return;
        }

        let user = await User.findOne({ telegramId: userId });

        if (!user) {
            console.log(`üöÄ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
            user = new User({
                telegramId: userId,
                walletAddress: null,
                balance: 0.00,
                processedTransactions: []
            });

            await user.save();
        }

        if (user.processedTransactions.includes(txHash)) {
            console.log(`‚ö† –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${txHash} —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`);
            return;
        }

        user.balance += amountTON;
        user.processedTransactions.push(txHash);

        await user.save();
        console.log(`üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –æ–±–Ω–æ–≤–ª—ë–Ω: +${amountTON} TON`);

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", error);
    }
};

setInterval(fetchTransactions, 30000);

async function connectDB() {
    try {
        await mongoose.connect(DATABASE);
        console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB");
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:", err);
        process.exit(1);
    }
}

connectDB();

const app = express();

app.use(cors({ origin: "https://viber-redirect.netlify.app" })); // –£–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–º–µ–Ω —Ñ—Ä–æ–Ω—Ç–∞
app.use(express.json()); // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON

const token = process.env.TELEGRAM_BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });

const FRONTEND_URL = "https://viber-redirect.netlify.app";

bot.onText(/\/start/, async (msg) => {
    console.log("üìå –ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", msg);

    const chatId = msg.chat.id;
    const userId = msg.from.id.toString();
    const languageCode = msg.from.language_code || 'en';
    const isRussian = languageCode.startsWith('ru');

    const frontendUrl = `${FRONTEND_URL}/?userId=${userId}`;
    console.log(`üìå –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${frontendUrl}`);

    const caption = isRussian ? '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.' : 'Welcome! Click the button to continue.';
    const buttonText = isRussian ? '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ' : 'Open App';

    const imagePath = path.join(__dirname, 'images', 'logo.onex.png');

    try {
        let user = await User.findOne({ telegramId: userId });

        if (!user) {
            user = new User({
                telegramId: userId,
                walletAddress: null,
                balance: 0.00,
                processedTransactions: []
            });

            await user.save();
            console.log(`‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`);
        } else {
            console.log(`üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.`);
        }

        await bot.sendPhoto(chatId, imagePath, {
            caption,
            reply_markup: {
                inline_keyboard: [
                    [{ text: buttonText, web_app: { url: frontendUrl } }]
                ]
            }
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start:', error);
        bot.sendMessage(chatId, isRussian
            ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.'
            : 'An error occurred while processing the command.');
    }
});

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã /start...');

// ‚úÖ –†–æ—É—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post("/register-user", async (req, res) => {
  try {
      const { telegramId } = req.body;

      if (!telegramId) {
          return res.status(400).json({ error: "telegramId is required" });
      }

      let user = await User.findOne({ telegramId });

      if (!user) {
          console.log(`üöÄ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId}, —Å–æ–∑–¥–∞—ë–º...`);
          user = new User({ telegramId, balance: 0.00, walletAddress: null });
          await user.save();
      }

      res.json({ success: true, userId: user.telegramId });
  } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      res.status(500).json({ error: "Internal server error" });
  }
});

// ‚úÖ –†–æ—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è userId
app.get("/get-user", async (req, res) => {
  try {
      const telegramId = req.headers["x-telegram-id"];

      if (!telegramId) {
          return res.status(400).json({ error: "telegramId is required in headers" });
      }

      let user = await User.findOne({ telegramId });

      if (!user) {
          return res.status(404).json({ error: "User not found" });
      }

      res.json({ userId: user.telegramId });
  } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ userId:", error);
      res.status(500).json({ error: "Internal server error" });
  }
});

// ‚úÖ –†–æ—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
app.get("/get-balance", async (req, res) => {
  try {
      const { userId } = req.query;

      if (!userId) {
          return res.status(400).json({ error: "userId is required" });
      }

      let user = await User.findOne({ telegramId: userId });

      if (!user) {
          return res.status(404).json({ error: "User not found" });
      }

      res.json({ balance: parseFloat(user.balance).toFixed(2) });
  } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:", error);
      res.status(500).json({ error: "Internal server error" });
  }
});

app.post("/update-wallet", async (req, res) => {
  try {
      const { userId, walletAddress } = req.body;

      if (!userId || !walletAddress) {
          return res.status(400).json({ error: "‚ùå userId –∏ walletAddress –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!" });
      }

      let user = await User.findOne({ telegramId: userId });

      if (!user) {
          return res.status(404).json({ error: "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!" });
      }

      user.walletAddress = walletAddress; // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—à–µ–ª–µ–∫
      await user.save();

      console.log(`‚úÖ –ö–æ—à–µ–ª–µ–∫ ${walletAddress} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      res.json({ success: true, walletAddress });
  } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞:", error);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

app.post("/start-farming", async (req, res) => {
  try {
    const { userId } = req.body;
    let user = await User.findOne({ telegramId: userId });
    let farming = await Farming.findOne();

    if (!user) {
      return res.status(404).json({ error: "User not found" });
    }

    if (!farming) {
      farming = new Farming({ availableNodes: 100 }); // ‚úÖ –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
      await farming.save();
    }

    if (farming.availableNodes <= 0) {
      return res.status(400).json({ error: "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–¥!" });
    }

    if (user.freeOnex === "—Ç–∞–π–º–µ—Ä") {
      return res.status(400).json({ error: "Farming already active" });
    }

    // ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Ñ–∞—Ä–º–∏–Ω–≥–∞
    const farmEndTime = new Date();
    farmEndTime.setSeconds(farmEndTime.getSeconds() + 20); // 20 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∞

    user.freeOnex = "—Ç–∞–π–º–µ—Ä";
    user.farmEndTime = farmEndTime;
    await user.save();

    // ‚úÖ –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–¥
    farming.availableNodes -= 1;
    await farming.save();

    console.log(`‚úÖ –§–∞—Ä–º–∏–Ω–≥ –Ω–∞—á–∞—Ç, –æ—Å—Ç–∞–ª–æ—Å—å ${farming.availableNodes} –Ω–æ–¥`);
    res.json({ success: true, farmEndTime, availableNodes: farming.availableNodes });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–∞—Ä–º–∏–Ω–≥–∞:", error);
    res.status(500).json({ error: "Server error" });
  }
});

app.post("/get-farming-status", async (req, res) => {
  try {
    const { userId } = req.body;
    console.log(`üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∞—Ä–º–∏–Ω–≥–∞ –¥–ª—è userId: ${userId}`);

    if (!userId) {
      return res.status(400).json({ error: "‚ùå userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!" });
    }

    let user = await User.findOne({ telegramId: userId });

    if (!user) {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ!`);
      return res.status(404).json({ error: "User not found" });
    }

    const now = new Date();

    if (user.freeOnex === "—Ç–∞–π–º–µ—Ä" && new Date(user.farmEndTime) <= now) {
      console.log(`‚è≥ –¢–∞–π–º–µ—Ä –∏—Å—Ç–µ–∫! –ó–∞–≤–µ—Ä—à–∞–µ–º —Ñ–∞—Ä–º–∏–Ω–≥ –¥–ª—è ${userId}...`);

      user.balance += 1;
      user.freeOnex = "–∑–∞—Ñ–∞—Ä–º–ª–µ–Ω–æ";
      user.farmEndTime = null; // ‚úÖ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
      await user.save();

      console.log(`‚úÖ –§–∞—Ä–º –∑–∞–≤–µ—Ä—à–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${user.balance}`);
      return res.json({ success: true, status: "–∑–∞—Ñ–∞—Ä–º–ª–µ–Ω–æ", balance: user.balance });
    }

    res.json({ success: true, status: user.freeOnex, farmEndTime: user.farmEndTime });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞:", error);
    res.status(500).json({ error: "Server error" });
  }
});

app.post("/finish-farming", async (req, res) => {
  try {
      const { userId } = req.body;
      console.log(`üìå –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ–∞—Ä–º–∏–Ω–≥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

      if (!userId) {
          console.log("‚ùå –û—à–∏–±–∫–∞: userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!");
          return res.status(400).json({ error: "‚ùå userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!" });
      }

      let user = await User.findOne({ telegramId: userId });

      if (!user) {
          console.log("‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!");
          return res.status(404).json({ error: "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!" });
      }

      console.log(`üïí –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: ${new Date()} | –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ–∞—Ä–º–∏–Ω–≥–∞: ${user.farmEndTime}`);

      if (!user.farmEndTime || new Date() < new Date(user.farmEndTime)) {
          console.log("‚è≥ –§–∞—Ä–º –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –û–∂–∏–¥–∞–µ–º...");
          return res.status(400).json({ error: "‚è≥ –§–∞—Ä–º –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω." });
      }

      if (user.freeOnex === "–∑–∞—Ñ–∞—Ä–º–ª–µ–Ω–æ") {
          console.log(`‚ö† –§–∞—Ä–º —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, –±–∞–ª–∞–Ω—Å: ${user.balance}`);
          return res.json({ success: true, message: "üéâ –£–∂–µ –∑–∞—á–∏—Å–ª–µ–Ω–æ!" });
      }

      user.balance += 1; // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º +1 TON
      user.freeOnex = "–∑–∞—Ñ–∞—Ä–º–ª–µ–Ω–æ"; // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      user.farmEndTime = null; // ‚úÖ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
      await user.save();

      console.log(`‚úÖ –§–∞—Ä–º –∑–∞–≤–µ—Ä—à–µ–Ω! +1 TON –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${user.balance}`);

      res.json({ success: true, message: "üéâ –§–∞—Ä–º –∑–∞–≤–µ—Ä—à–µ–Ω!", balance: user.balance });
  } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ñ–∞—Ä–º–∏–Ω–≥–∞:", error);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

app.get("/get-available-nodes", async (req, res) => {
  try {
    let farming = await Farming.findOne(); // ‚úÖ –ò—â–µ–º –∑–∞–ø–∏—Å—å

    if (!farming) {
      farming = new Farming({ availableNodes: 100 }); // ‚úÖ –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
      await farming.save();
    }

    res.json({ availableNodes: farming.availableNodes });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–¥:", error);
    res.status(500).json({ error: "Server error" });
  }
});

app.post("/start-paid-farming", async (req, res) => {
  try {
    const { userId, nodeId } = req.body;

    if (!userId || !nodeId) {
      return res.status(400).json({ error: "userId –∏ nodeId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!" });
    }

    let user = await User.findOne({ telegramId: userId });

    if (!user) {
      return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    // üî• –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–¥–µ —Å –∞–¥–º–∏–Ω-–±—ç–∫–µ–Ω–¥–∞
    const nodeResponse = await axios.get(`https://adminviber1x-production.up.railway.app/onex-nodes/${nodeId}`);

    if (!nodeResponse.data) {
      return res.status(404).json({ error: "–ù–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!" });
    }

    const node = nodeResponse.data;

    // üî• –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—Å—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç—É –Ω–æ–¥—É
    if (user.activePaidNodes.some(n => n.nodeId.toString() === nodeId)) {
      return res.status(400).json({ error: "–í—ã —É–∂–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏ —ç—Ç—É –Ω–æ–¥—É!" });
    }

    // üî• –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (user.balance < node.stake) {
      return res.status(400).json({ error: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!" });
    }

    // ‚úÖ –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–∞–≤–∫—É –∏–∑ –±–∞–ª–∞–Ω—Å–∞
    user.balance -= node.stake;

    // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ñ–∞—Ä–º–∏–Ω–≥–∞
    const farmEndTime = new Date();
    farmEndTime.setDate(farmEndTime.getDate() + node.days);

    // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –Ω–æ–¥—É –≤ `activePaidNodes`
    user.activePaidNodes.push({
      nodeId: node._id,
      section: node.section,
      stake: node.stake,
      apy: node.apy,
      days: node.days,
      rewardTon: node.rewardTon,
      rewardOnex: node.rewardOnex,
      farmEndTime: farmEndTime
    });

    await user.save();

    console.log(`‚úÖ –ü–ª–∞—Ç–Ω–∞—è –Ω–æ–¥–∞ #${node.index} –∑–∞–ø—É—â–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}, –æ–∫–æ–Ω—á–∞–Ω–∏–µ ${farmEndTime}`);

    res.json({ success: true, message: "–ù–æ–¥–∞ –∑–∞–ø—É—â–µ–Ω–∞!", farmEndTime, activePaidNodes: user.activePaidNodes });

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞—Ç–Ω–æ–π –Ω–æ–¥—ã:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

const PORT = process.env.PORT;
app.listen(PORT, () => {
    console.log(`üåç –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});